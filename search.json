[{"title":"Mac安装homebrew","url":"/posts/a54e1012/","content":"简介如果你是一位 MacOS 用户，那么你可能听说过 Homebrew 。Homebrew 是 MacOS 下的包管理工具，类似 apt 、yum 。如果一款软件支持了 Homebrew 安装渠道，那么我们就可以通过 Homebrew 一键安装，省时省力省心。\n使用脚本安装\n官方提供安装脚本，可以直接使用：\n/bin/bash -c &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)&quot;\n\n如果是大陆网络环境安装缓慢，可以尝试切换中科大镜像源：\n/bin/bash -c &quot;$(curl -fsSL https://gitee.com/ineo6/homebrew-install/raw/master/install.sh)&quot;\n\n手动安装不喜欢用脚本的也可以手动安装：\n\n创建安装目录\n\nsudo mkdir -p /opt/homebrew\n\n\n修改所有者，所属组\n\nsudo chown -R $(whoami) /opt/homebrew\n\n\n安装 homebrew\n\ncurl -L https://github.com/Homebrew/brew/tarball/master | tar xz --strip 1 -C /opt/homebrew\n\n\n修改所有者，所属组\n\nsudo chown -R $(whoami) /opt/homebrew\n\n\n修改环境变量\n\necho &#x27;path=(&#x27;/opt/homebrew/bin&#x27; $path) &amp;&amp; export PATH&#x27; &gt;&gt; ~/.zshrc\n\n\n刷新环境变量\n\nsource ~/.zshrc\n\n\n测试是否安装成功\n\nbrew -v","categories":["工具"],"tags":["Mac","Homebrew"]},{"title":"Mac 安装和使用 aria2","url":"/posts/d1c4d6b/","content":"前言\naria2是一款轻量级、多协议、多来源的命令行下载工具，支持 HTTP&#x2F;HTTPS、FTP、SFTP、BitTorrent、Metalink 等协议。相比 curl 或 wget，aria2 在多线程分段下载和断点续传方面更强大，非常适合大文件下载。\n\n本文记录如何在 macOS 上通过 Homebrew 安装、配置 aria2c，并实现 后台运行、开机自启，以及通过 Web GUI 或浏览器插件进行可视化管理。\n\n如果不想折腾，推荐使用Motrix。\n\n\n\n什么是 aria2 和 aria2c\naria2是整个项目的名字，指这个多协议下载工具本身。特点是轻量、快速，支持多线程和断点续传。  \n\naria2c是 aria2 的 命令行客户端程序，通常在终端中执行 aria2c 来下载文件或管理下载任务。\n\n\n简单来说，aria2 是项目，aria2c 是执行程序，本文主要讲解使用命令行的 aria2c。\n\n安装并配置aria2# 使用 Homebrew 安装 aria2brew install aria2# 创建配置目录与文件mkdir -p ~/.aria2touch ~/.aria2/aria2.conftouch ~/.aria2/aria2.session\nMac安装homebrew\n\n编辑 ~&#x2F;.aria2&#x2F;aria2.conf，示例：\n# 下载目录dir=$&#123;HOME&#125;/Downloads# 开启断点续传continue=true# 磁盘缓存disk-cache=32M# 最大同时下载任务数max-concurrent-downloads=5# 每个任务的最大连接数split=16max-connection-per-server=16# 最小文件分片大小min-split-size=1M# 文件未完成时保存为 .aria2 后缀，下载完成自动去除allow-overwrite=trueauto-file-renaming=true# RPC 设置enable-rpc=truerpc-listen-port=6800rpc-listen-all=truerpc-allow-origin-all=true# rpc-secret=你的密钥# 会话文件input-file=$&#123;HOME&#125;/.aria2/aria2.sessionsave-session=$&#123;HOME&#125;/.aria2/aria2.sessionsave-session-interval=60# 使用 UTF-8 处理 Content-Dispositioncontent-disposition-default-utf8=true# 客户端伪装# &gt; 自定义 User Agentuser-agent=Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36# &gt; BT 客户端伪装peer-id-prefix=-TR4040-peer-agent=Transmission/4.0# BT 下载设置enable-dht=trueenable-dht6=truebt-enable-lpd=trueenable-peer-exchange=trueseed-ratio=1.0# seed-time=0# &gt; BT 下载最大连接数（单任务）bt-max-peers=128# &gt; BT 下载期望速度值（单任务）bt-request-peer-speed-limit=10M# &gt; 保存磁力链接元数据为种子文件(.torrent)bt-save-metadata=true# &gt; 加载已保存的元数据文件bt-load-saved-metadata=true# &gt; 删除 BT 下载任务中未选择文件bt-remove-unselected-file=true# &gt; 分离仅做种任务bt-detach-seed-only=true# 种子文件下载完后暂停任务pause-metadata=true# &gt; 继续之前的BT任务时, 无需再次校验bt-seed-unverified=true# &gt; BT 服务器地址bt-tracker=\n⚠️注意替换你的RPC密钥\n\n后台运行 aria2\n在 macOS 上可以使用-D 或 --daemon启用守护进程模式\n\naria2c --conf-path=$HOME/.aria2/aria2.conf -D\n\n查看后台进程：\n\nps aux | grep aria2\n\n停止后台运行：\n\npkill aria2\n\n\n开机自启 aria2macOS 可以使用 LaunchAgent 来设置开机自启。\n\n创建 LaunchAgent 文件：\n\nmkdir -p ~/Library/LaunchAgentsvim ~/Library/LaunchAgents/aria2.plist\n\n粘贴以下内容：\n\n&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;!DOCTYPE plist PUBLIC &quot;-//Apple Computer//DTD PLIST 1.0//EN&quot; &quot;http://www.apple.com/DTDs/PropertyList-1.0.dtd&quot;&gt;&lt;plist version=&quot;1.0&quot;&gt;&lt;dict&gt;  &lt;key&gt;Label&lt;/key&gt;  &lt;string&gt;aria2&lt;/string&gt;  &lt;key&gt;ProgramArguments&lt;/key&gt;  &lt;array&gt;    &lt;string&gt;/opt/homebrew/bin/aria2c&lt;/string&gt;    &lt;string&gt;--conf-path=/Users/你的用户名/.aria2/aria2.conf&lt;/string&gt;  &lt;/array&gt;  &lt;key&gt;RunAtLoad&lt;/key&gt;  &lt;true/&gt;  &lt;key&gt;KeepAlive&lt;/key&gt;  &lt;true/&gt;&lt;/dict&gt;&lt;/plist&gt;\n⚠️一定要记得替换WorkingDirectory参数下的用户名，以及检查ProgramArguments参数下的目录是否正确。\n\n添加并启用自启动项:\n\n# 检查plist语法是否正确plutil ~/Library/LaunchAgents/aria2.plist# 修改文件权限chmod 644 ~/Library/LaunchAgents/aria2.plist# 添加自启动项: aria2launchctl load ~/Library/LaunchAgents/aria2.plist# 删除自启动项: aria2launchctl unload ~/Library/LaunchAgents/aria2.plist# 启动服务: aria2launchctl start aria2# 停止服务: aria2launchctl stop aria2\n⚠️如果提示诸如Load failed: 5: Input&#x2F;output error Try running launchctl bootstrap as root for richer errors.此类的错误，请先检查aria2c路径或者尝试更新全部brew依赖，若没有解决请尝试先删除启动项再进行load。\n\nAria2 Web GUI前提：使用 Aria2 Web GUI 都需要根据 aria2.conf 配置文件中的 PRC 相关设置项进行设置，下面推荐两个 Aria2 Web GUI 项目。\n\nAriaNg\n\n\n这是一款基于网页的 aria2 前端管理工具，它无需安装，只要打开官方托管网页即可使用，通过连接 aria2 的 RPC 接口 来实现可视化管理。当然你也可以将它下载到本地用浏览器打开或者自行部署到服务器。\n\n\nAria2 Explorer\n\n\n这是一个浏览器插件，其实普通用户更推荐使用这个。\n它能够自动拦截浏览器下载任务并通过JSON-RPC接口导出到Aria2进行高速下载并内置AriaNG作为管理前端。\n插件本身具备通知功能。\n插件整合了右键下载菜单。\n\n\n自动更新bt-tracker\n创建一个脚本\n\nvim  ~/.aria2/update-tracker.sh\n\n\n写入以下内容，注意替换 RPC 密钥，如果没有设置密钥则删除MY_SECRET那一行或者留空：\n\n#!/bin/bash########################### 用户可修改的配置区########################### aria2 配置文件路径CONF=&quot;$&#123;HOME&#125;/.aria2/aria2.conf&quot;# tracker 列表 URLTRACKER_URL=&quot;https://trackerslist.com/all_aria2.txt&quot;# RPC 地址ARIA2_RPC=&quot;http://localhost:6800/jsonrpc&quot;# RPC 密钥MY_SECRET=&quot;&quot;  # 例: MY_SECRET=&quot;abcd1234&quot;########################### 脚本逻辑区########################### 自动生成 RPC JSON 中的 SECRET[ -n &quot;$MY_SECRET&quot; ] &amp;&amp; SECRET=&quot;\\&quot;token:$MY_SECRET\\&quot;&quot;echo -e &quot;\\033[34m==&gt; 获取最新 bt-tracker 列表......\\033[0m&quot;# 下载 tracker 列表并转换为逗号分隔list=$(curl -fsSL &quot;$TRACKER_URL&quot; | tr &#x27;\\n&#x27; &#x27;,&#x27; | sed &#x27;s/,$//&#x27;)if [ -z &quot;$list&quot; ]; then    echo -e &quot;\\033[31m❌ 获取 tracker 失败，请检查网络或 URL\\033[0m&quot;    exit 1fitracker_count=$(echo &quot;$list&quot; | tr &#x27;,&#x27; &#x27;\\n&#x27; | wc -l | tr -d &#x27; &#x27;)# 更新配置文件if grep -q &quot;^bt-tracker=&quot; &quot;$CONF&quot;; then    echo -e &quot;\\033[34m==&gt; 更新 $&#123;CONF&#125; 中的 bt-tracker 信息......\\033[0m&quot;    sed -i &#x27;&#x27; &quot;s@^bt-tracker=.*@bt-tracker=$&#123;list&#125;@g&quot; &quot;$CONF&quot;else    echo -e &quot;\\033[34m==&gt; 添加 bt-tracker 信息到 $&#123;CONF&#125;......\\033[0m&quot;    echo -e &quot;\\nbt-tracker=$&#123;list&#125;&quot; &gt;&gt; &quot;$CONF&quot;fi# RPC 更新json=$(cat &lt;&lt;EOF&#123;  &quot;jsonrpc&quot;:&quot;2.0&quot;,  &quot;method&quot;:&quot;aria2.changeGlobalOption&quot;,  &quot;id&quot;:&quot;update-trackers&quot;,  &quot;params&quot;:[    $&#123;SECRET:+ &quot;$SECRET&quot;, &#125;    &#123;      &quot;bt-tracker&quot;:&quot;$list&quot;    &#125;  ]&#125;EOF)rpc_result=$(curl -fsSL -H &#x27;Content-Type: application/json&#x27; -d &quot;$json&quot; &quot;$ARIA2_RPC&quot;)if [ $? -eq 0 ] &amp;&amp; echo &quot;$rpc_result&quot; | grep -q &quot;result&quot;; then    echo -e &quot;\\033[32m✅ RPC 更新成功：已应用 $&#123;tracker_count&#125; 个 tracker\\033[0m&quot;else    echo -e &quot;\\033[33m⚠️  RPC 更新失败（aria2 可能未运行），但配置文件已更新\\033[0m&quot;fi\n使用方法\n赋权：\n\nchmod +x ~/.aria2/update-tracker.sh\n\n测试运行：\n\n~/.aria2/update-tracker.sh\n\n设置定时更新：\n\ncrontab -e\n\n写入以下内容：\n\n0 18 * * * $HOME/.aria2/update-tracker.sh &gt;/dev/null 2&gt;&amp;1\n这样，每天18点会自动更新bt-tracker，脚本特点：\n\n可以替换为自己喜欢的 TRACKER_URL\n支持同时写入aria2.conf和动态更新远程 RPC 配置\n不用重启 aria2 也可以使用最近更新的 bt-tracker，保证当前下载不受影响\n如果要手动重启 aria2 也能保证 RPC 配置中的bt-tracker不会丢失\n\nyt-dlp简单配置","categories":["工具"],"tags":["Mac","aria2"]},{"title":"Mac搭建Hexo博客","url":"/posts/a5a35a5a/","content":"前言最近开始捣鼓 Hexo，一个轻量的静态博客框架，主要是想找个地方安静地记录点东西，也顺便体验下 Hexo + Git 的完整部署流程。虽然官方文档写得已经够详细了，但在 Mac 上操作的过程中还是踩了不少小坑，于是就决定把整个过程整理记录下来，也方便自己回顾。\n准备工作安装 HomebrewHomebrew 是 macOS 下最常用的包管理工具，后续需要用它来安装依赖。使用以下命令进行安装：\n/bin/bash -c &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)&quot;\n\n安装完成后可以运行 brew -v 检查是否安装成功。\n安装 Git 和 Node.jsGit 是 Hexo 项目版本控制的基础，而 Hexo 则基于 Node.js 运行。macOS 自带 Git，如果你希望使用最新版本，也可以通过 Homebrew 升级。确认 Git 安装：\ngit --version\n\n然后安装 Node.js（包含 npm）：\nbrew install node\n\n安装 Hexo 并初始化项目使用 npm 全局安装 Hexo CLI 工具：\nnpm install -g hexo-cli\n\n安装完成后，在你希望存放博客的路径下初始化项目：\nhexo init blogcd blognpm install\n\n这里的 blog 是你博客项目的文件夹名，可以根据喜好替换。\n⚠️注意：以下所有的hexo命令都需要在blog路径下执行，即确保先执行cd blog。\n初始化后可以生成和本地预览博客：\nhexo generate 或 hexo g   # 生成静态文件hexo server 或 hexo s     # 启动本地服务器\n\n然后访问浏览器中的 http://localhost:4000 即可看到博客初始页面。\n部署到 GitHub PagesHexo 默认使用 public 文件夹存放生成的静态资源，我们只需要把它部署到 GitHub 即可上线。\n配置 GitHub SSH 密钥如果你还未在本机配置过 SSH，可以按以下步骤进行：\nssh-keygen -t ed25519 -C &quot;your_email@example.com&quot;\n\n一路回车后，复制生成的公钥内容：\npbcopy &lt; ~/.ssh/id_ed25519.pub\n\n然后前往 GitHub 个人设置中添加 SSH key。\n设置 Git 账号git config --global user.name &quot;YourName&quot;git config --global user.email &quot;your_email@example.com&quot;\n\n完成这些工作以后可以执行以下命令测试，出现你的Github用户名代表配置成功：\nssh git@github.com\n\n\n\n安装部署插件Hexo 需要用到一个插件将博客内容部署到 GitHub：\nnpm install hexo-deployer-git --save\n\n创建 GitHub 仓库并启用 Pages\n登录 GitHub，点击右上角“+” → “New repository”；\n仓库名称建议为：yourusername.github.io（将 yourusername 替换为你的 GitHub 用户名）；\n选择 public 类型，点击创建；\n创建成功后进入仓库页面，点击“Settings” → 左侧“Pages”；\n在“Source”处选择 Deploy from a branch；\n选择 main 分支，文件夹选择 / (root)，点击保存；\n页面会自动生成一个访问链接，等待几分钟后就能访问。\n\n配置 Hexo 部署信息修改blog目录下 _config.yml 配置文件，添加以下部署信息：\ndeploy:  type: git  repo: git@github.com:yourusername/yourusername.github.io.git  branch: main\n\n确保你的仓库已经创建完成且为 public，然后执行：\nhexo cleanhexo ghexo d\n\n第一次部署可能会提示是否接受 SSH 密钥认证，输入 yes 即可。\n自定义域名配置（可选）如果你有自己的域名，可以将博客部署在个性化的地址。\n\n在博客目录中创建一个 CNAME 文件：\n\necho &quot;yourdomain.com&quot; &gt; blog/source/CNAME\n\n\n在你的域名服务商（如 Cloudflare、阿里云等）中添加一条 CNAME 记录，指向 GitHub Pages：\n\nyourusername.github.io\n\n⚠️ 注意：如果你使用 Cloudflare，添加 CNAME 记录时请关闭“小云朵”图标（即不要开启代理），否则可能导致 GitHub Pages 无法正确解析。\n\n登录 GitHub，进入你的博客仓库页面，点击“Settings” → 左侧“Pages”；\n\n在“Custom domain”栏中填写你的域名 yourdomain.com 并点击“Save”；\n\n勾选 Enforce HTTPS，等待 DNS 解析完成后访问你的自定义域名即可生效。\n\n同时确保 _config.yml 中的 url 字段也已更新为你的域名：\n\n\nurl: https://yourdomain.com\n\n这样每次部署时，Hexo 会自动将 CNAME 文件同步至 public 文件夹，实现自定义域名访问。\n常用命令整理⚠️注意：以下hexo命令均需要切换到blog文件夹执行，确保先执行cd blog\n\nhexo clean：清理缓存文件（如生成失败时可用）\nhexo new &quot;post name&quot; 或 hexo n &quot;post name&quot; ：创建新文章\nhexo generate 或 hexo g：生成静态资源\nhexo server 或 hexo s：本地预览网站\nhexo deploy 或 hexo d：部署博客到远端\n\n后记整个过程看似步骤繁多，实际上操作几次就熟悉了。如果你也在寻找一个简洁、可控的写作平台，不妨试试 Hexo。接下来可以根据自己的喜好更换主题、美化样式，慢慢打造属于自己的博客空间。\n","categories":["工具"],"tags":["Mac","Hexo","Github"]},{"title":"snell简单搭建","url":"/posts/f500c74e/","content":"前言Snell 是 Surge 官方推出的一款轻量级代理服务器，基于自定义协议，专为搭配 Surge 使用设计，支持 TCP、UDP 以及 TLS 加密传输。\n本文简要介绍如何在 Linux 系统上安装和配置 Snell，实现本地代理转发。操作步骤简洁明了，适合快速部署。\n安装 Snell\n下载并解压服务端 ,以 Snell v5.0.0 Linux amd64 版本为例：\nwget -O snell-server.zip https://dl.nssurge.com/snell/snell-server-v5.0.0-linux-amd64.zip      &amp;&amp; unzip snell-server.zip -d /usr/local/bin      &amp;&amp; rm snell-server.zip\n\n添加执行权限：\nchmod +x /usr/local/bin/snell-server\n\n\n创建配置文件：\n\n首先新建配置目录：\nsudo mkdir /etc/snell\n\n使用向导生成配置文件（推荐）：\nsudo snell-server --wizard -c /etc/snell/snell-server.conf\n\n或者手动创建：\nsudo vim /etc/snell/snell-server.conf\n\n内容示例：\n[snell-server]listen = 0.0.0.0:portpsk = pskipv6 = true\n\n提示：你可以使用以下命令生成随机 PSK：\nopenssl rand -base64 32\n\n\n\n创建独立用户运行 Snell\n建议为 Snell 创建一个低权限系统用户以提高安全性：\n\nsudo useradd --system --no-create-home --shell /usr/sbin/nologin snell\n\n\n确保执行文件和配置文件拥有正确权限：\n\nsudo chown -R snell:snell /usr/local/bin/snell-serversudo chown -R snell:snell /etc/snell\n\n配置 systemd 服务为了便于管理 Snell 服务，建议配置 systemd 单元：\nsudo vim /etc/systemd/system/snell.service\n\n添加以下内容：\n[Unit]Description=Snell Proxy ServiceAfter=network.target[Service]ExecStart=/usr/local/bin/snell-server -c /etc/snell/snell-server.confUser=snellRestart=on-failure[Install]WantedBy=multi-user.target\n\n保存后执行以下命令启动并设置开机启动：\nsudo systemctl daemon-reloadsudo systemctl enable --now snell\n\n查看服务状态：\nsudo systemctl status snell\n\n开放防火墙端口根据配置中监听的端口号，在防火墙中放行：\nsudo ufw allow 端口号\n\n\n更新 Snell更新 Snell 的方式与首次安装类似，只需下载新版覆盖旧文件即可，注意替换下载链接：\nsudo systemctl stop snellwget -O snell-server.zip https://dl.nssurge.com/snell/snell-server-v5.0.0-linux-amd64.zip \\  &amp;&amp; unzip -o snell-server.zip -d /usr/local/bin \\  &amp;&amp; rm snell-server.zipchmod +x /usr/local/bin/snell-serversudo systemctl start snell\n\n你也可以查看官方发布页确认是否有新版本。\n结语Snell 是一个部署快速、配置灵活的代理服务器，适合个人或小规模私用代理部署。搭配 Surge 使用可实现高速稳定的连接体验。\n","categories":["工具"],"tags":["Surge","Linux","代理","snell"]},{"title":"yt-dlp简单配置","url":"/posts/6c9d2d1d/","content":"简介\nyt-dlp 是一个很强大的 YouTube 和各类视频平台下载器，相比 youtube-dl 更新得更快、功能更多。\n\n安装\n这里仅以macOS为例，其他系统详见官方指引，建议配合 FFmpeg、 aria2 使用。\n\nwget https://github.com/yt-dlp/yt-dlp/releases/latest/download/yt-dlp_macos -O ~/.local/bin/yt-dlpchmod a+rx ~/.local/bin/yt-dlp\n配置分享一个搭配FFmpeg和aria2c的简单的配置，根据实际需要自行调整\n\n创建配置文件\n\nmkdir -p ~/.config/yt-dlpvim ~/.config/yt-dlp/config\n\n写入以下内容\n\n# 保存目录和文件名-o &quot;$HOME/Downloads/%(title)s/%(title)s.%(ext)s&quot;# 选择最佳画质视频+音频，并合并成 mp4-f &quot;bv+ba/b&quot;--merge-output-format mp4# 下载字幕，单独保存为 ass 文件--write-subs--sub-langs &quot;zh.*&quot;--convert-subs ass# 使用 aria2c 加速下载--downloader aria2c#&gt; 替换your-rpc-secret，如果没有设置，则删除--rpc-secret部分--downloader-args &quot;aria2c:-c -x16 -s16 -k1M --rpc-secret=your-rpc-secret&quot;# 遇到已有文件时跳过--no-overwrites# 下载失败时自动重试--retries 5--fragment-retries 5--abort-on-unavailable-fragment# 其他（可选，增强体验）# &gt; 显示进度条--progress# &gt; 只下载单个视频，不下载整个播放列表--no-playlist# &gt; 不要使用 Last-modified 标头设置文件修改时间--no-mtime# &gt; 下载后把标题、作者等写入mp4文件元数据--embed-metadata# &gt; 如果有封面图，则嵌入视频--embed-thumbnail# &gt; 反机器人机制--extractor-args &quot;generic:impersonate&quot;# &gt; 自动从浏览器获取 cookies--cookies-from-browser chrome\n使用\n为了方便使用，可以设置一个 alias（可选）：\n\necho &#x27;alias yt=yt-dlp&#x27; &gt;&gt; ~/.zshrcsource ~/.zshrc\n\n直接用yt即可调用下载。\n\n安装和使用aria2","categories":["工具"],"tags":["yt-dlp","视频"]},{"title":"《花束般的恋爱》——我们终究不是“错的人”，只是“走散的大人”","url":"/posts/5b769a88/","content":"\n即使终有一别，我还是很高兴遇见你。\n\n\n一段关于青春的预言，不只是爱情《花束般的恋爱》并不是一部用来“相信爱情”的电影，恰恰相反，它讲述的是爱情最令人痛楚的那一面：两个人明明相爱，却最终不得不说再见。但正是这种克制的表达方式，让这部电影拥有了更深的共鸣价值。\n这不只是一段恋爱史，更是一份献给 成长、现实与选择 的青春纪实。\n\n    [{\"url\":\"https://pic1.imgdb.cn/item/6890cc4358cb8da5c804a4b2.webp\",\"alt\":\"\",\"title\":\"\"},{\"url\":\"https://pic1.imgdb.cn/item/6890ca1858cb8da5c8049742.webp\",\"alt\":\"\",\"title\":\"\"},{\"url\":\"https://pic1.imgdb.cn/item/6890d08258cb8da5c804b833.webp\",\"alt\":\"\",\"title\":\"\"}]\n  \n\n\n主题解析：从灵魂契合到现实撕裂影片的前半段几乎完美诠释了“灵魂伴侣”的理想——两人因为错过末班车而相识，进而发现彼此拥有几乎完全一致的喜好：同样喜欢的插画师、相同的冷门乐队，甚至连便利店咖喱的排名都一致。那种“遇见对的人”的悸动，就像青春期的理想在现实中奇迹般落地。\n然而，电影后半段迅速下沉。当两人步入社会，曾经作为纽带的“共同兴趣”开始褪色，被职场、现实、家庭等压力替代。他们开始有了不同的价值观、不同的生活节奏。理想与现实的断裂，不再只是抽象的概念，而变成了每日每夜消磨在一起的感情。\n\n爱情不是两个人有多合得来，而是当他们开始不合时，是否还能愿意继续走下去。\n\n\n导演的镜头语言：浪漫中预埋的“危险信号”导演非常擅长用细腻的视听语言来进行 潜意识暗示。有一幕令人印象深刻：\n\n两人第一次接吻的场景，是在十字路口等待红灯时。镜头将背景中的红灯与亲吻动作叠加，显得既浪漫又危险。\n\n红色在视觉中往往代表激情，但也象征着警告与停止。这一幕，仿佛在悄悄预言：他们的爱情虽然炽热，却终将止步于某个现实的路口。\n此外，影片的色调也经历了由明亮到灰淡的过渡——前期充满阳光、自然光与柔焦，后期则以室内阴影、冷色调居多，这种微妙的转变，与两人关系的逐步降温如出一辙。\n\n人物性格差异：浪漫与现实的错位轨道\n八谷绢 是典型的理想主义者。她浪漫、细腻、坚持自我。对她而言，热爱本身就是生活的意义。她想从事自己喜欢的工作，想保留小众的趣味，想要的爱情也必须是“灵魂契合”的。\n山音麦 则更现实。他起初同样怀有热情与理想，但很快被社会规则驯化。他习惯了“上班-下班-加班”的节奏，逐渐放弃了热爱，接受了“这才是正常人生”的逻辑。\n\n这对情侣，并没有谁对谁错。他们只是代表了两种性格路径：\n\n一种始终试图保留自我（但也因此显得不成熟）；\n一种选择适应社会规则（却在过程中失去热情）。\n\n他们曾经如此相似，却在现实中被拉开距离，最终变成了两个“看起来不错”但“再也无法理解彼此”的大人。\n\n现实隐喻：年轻人的理想，被时代悄悄吞噬影片不仅是恋爱故事的书写，更是对当代日本（乃至亚洲）年轻人境遇的隐喻：\n\n工作压力：在公司加班、应酬、压抑自我——这与现实中“996”的职场异曲同工。梦想被“先活下去”的生存逻辑所替代。\n婚姻焦虑：两人在分手前一场典型的“结婚讨论”令人窒息。爱情最初是浪漫的，但当房贷、工作地点、双方家庭介入后，一切都开始变得难堪。\n文化认同危机：影片中提到的书籍、漫画、音乐，多为“小众审美”的象征。这些原本是他们“个性”的组成，但在社会评价体系中却显得“不实用”、“不主流”。\n\n这种困境并非某一个人的失败，而是整整一代人共同的伤口。\n\n花束的隐喻：注定凋谢的美好，也值得珍藏影片标题《花束般的恋爱》本身就是对这段感情的定义：\n\n花束很美，但不会永远盛开。它终将枯萎，但这并不妨碍它曾经芬芳。\n\n导演并未试图用重逢、复合、巧合来抚慰观众。电影的结尾是他们在街头偶遇，微笑点头，随后各自向前走去。这既不是“虐”，也不是“释怀”，而是成年人的一种默契——有些人，不是没爱过，而是爱过了，才知道不能继续爱下去。\n\n博主观后感：我们都曾是他们，也终将成为我们自己这部电影最打动我的，是它让“失败的恋爱”变得温柔、体面、甚至值得感激。\n很多时候我们以为，“没走到最后”的关系就是失败。但《花束般的恋爱》告诉我，有些人出现，只是为了让你成为更成熟的自己。他们像一束花，陪你走过一段特别的时间，留下香气，然后消散。\n所以，就算结局不能长久，我们依然可以说：\n\n“谢谢你曾和我一起相信过不切实际的爱情，谢谢你让我知道，我可以这么热烈地去喜欢一个人。”\n\n\n\n\n\n\n\n  \n","categories":["影视"],"tags":["电影","有村架纯","菅田将晖"]},{"title":"「轻涟」","url":"/posts/16b1168b/","content":"\n\n引用b站视频测试\n","categories":["游戏"],"tags":["原神","芙宁娜"]},{"title":"使用 Cloudflare 和 Gmail 搭建自定义个性域名邮箱","url":"/posts/d06b8f7b/","content":"前言如果你拥有一个域名，打算用它来作为自己的个性域名邮箱，本文将手把手教你使用 Cloudflare + Gmail 搭建一个完全免费的自定义邮箱系统，其实本质是 Gmail 邮箱的别名，支持：\n\n📥 邮件接收（通过 Cloudflare 自动转发到 Gmail）\n📤 邮件发送（通过 Gmail SMTP 或 Spark 客户端）\n🧊 支持 Catch-all（接收所有 @example.com 邮件）\n\n\n各种域名邮箱方案对比\n\n\n服务\n收费\n配置难度\n收件方式\n发件方式\n推荐指数\n\n\n\nCloudflare + Gmail\n免费\n🌟 非常简单\nCloudflare 转发\nGmail SMTP\n⭐⭐⭐⭐⭐\n\n\nYandex Mail\n免费（限制多）\n中等\n自带\n自带 SMTP\n⭐⭐\n\n\nMailgun\n免费额度有限\n较复杂\n不支持直接收件\n提供 SMTP\n⭐⭐\n\n\nZoho Mail\n有免费方案\n中等\n自带 Webmail 收件\n自带 SMTP\n⭐⭐⭐\n\n\n\n✅ Cloudflare 是目前对个人用户最友好的免费方案，操作少，界面全中文，维护简单。\n\n\n使用 Cloudflare 接收邮件第一步：开启 Cloudflare 邮件路由功能\n登录 Cloudflare 控制台\n进入你已经接入的域名（如 example.com）\n点击左侧导航栏的「电子邮件」\n点击「开始使用」\n填写：\n自定义地址：填写你要创建的邮箱名，例如 mail\n目标地址：填写你 Gmail 的地址，例如 yourname@gmail.com\n\n\n点击添加，Cloudflare 会自动创建以下 DNS 记录：\nMX 记录：启用邮件接收\nTXT 记录：验证域名归属\n\n\n等待几分钟，Cloudflare 会显示状态为 ✅「已启用」\n\n\n第二步（可选）：启用 Catch-all 邮箱如果你想接收所有发往 @example.com 的邮件（例如 abc@example.com、test@example.com），可以启用 Catch-all 功能：\n\n在邮件路由页面下方，找到「Catch-all 地址」\n勾选启用\n设置默认转发地址为你的 Gmail 地址\n\n\n⚠️ 建议先验证单个邮箱可用后再开启 Catch-all，避免接收到大量垃圾邮件。\n\n\n获取 Gmail 的应用专用密码（用于 SMTP）为了安全，Google 不允许用主密码登录第三方 SMTP 服务，必须使用专用密码。\n获取流程如下：\n打开你的 Google 账户安全设置页面：👉 https://myaccount.google.com/security\n\n在「登录 Google」区域，启用两步验证\n\n如果已启用，点击「两步验证」进入设置页面\n\n\n在「两步验证」页面，找到「应用专用密码」一项\n\n点击进入，自定义应用名称，如“域名邮箱”\n\n点击「生成」，你会获得一组 16 位的专用密码\n\n只显示一次，记得立即复制保存\n\n\n\n\n在 Gmail 中配置自定义域名邮箱我们需要在 Gmail 中设置发件人地址为 mail@example.com，并使用刚才生成的专用密码登录 SMTP。\n添加发件邮箱步骤：\n打开 Gmail → 设置 →「查看所有设置」\n\n切换到「账户和导入」标签页\n\n找到「发送邮件时的名称」 → 点击「添加其他电子邮件地址」\n\n填写：\n\n名称：随意\n\n邮箱地址：mail@example.com\n\n\n\n点击「下一步」，进入 SMTP 设置\n\n\n\nSMTP 信息填写如下：\n\n\n项目\n内容\n\n\n\nSMTP 服务器\nsmtp.gmail.com\n\n\n端口\n587\n\n\n用户名\n你的 Gmail 地址\n\n\n密码\n你刚刚生成的应用专用密码\n\n\n\n完成后 Gmail 会发送一封验证邮件到 mail@example.com（即转发到你 Gmail）\n打开收件箱，点击验证链接，即可完成发件设置\n\n\n使用域名邮箱收发邮件使用 GmailGmail：验证成功后，使用Gmail发送邮件时，就可以选择发件人了，不多赘述。\n在 Spark 中接收邮件Spark 是一款优秀的支持多平台的邮件客户端，因为邮件已经被 Cloudflare 转发到 Gmail，无需额外设置，只需在 Spark 添加你的 Gmail 即可。\n使用 Spark 发送邮件\nSpark → 设置 → 邮箱账号 → Gmail 账户 → 替身邮箱\n添加替身邮箱：\n姓名：随意\n邮箱地址：mail@example.com\n可选：将mail@example.com设置为默认邮址\n\n\n\n之后你就可以在 Spark 中以 mail@example.com 的身份发送邮件了 \n\n测试步骤\n给 mail@example.com 发送一封邮件→ 查看是否能正常转发到你的 Gmail\n\n在 Gmail 或 Spark 中选择发件人为 mail@example.com 发送邮件→ 查看收件人是否能看到你自定义的发件邮箱\n\n\n\n总结通过 Cloudflare 与 Gmail 的组合，你可以免费拥有一个完整的域名邮箱方案：\n\n✅ 接收邮件：Cloudflare 转发至 Gmail\n✅ 发送邮件：通过 Gmail 或 Spark 使用 SMTP 发信\n✅ 免费、安全、无需第三方邮箱服务\n✅ 支持 Catch-all，多邮箱同时管理\n\n这是一种非常适合个人博客、自建站、开发者项目的域名邮箱搭建方式！\n","categories":["杂谈"],"tags":["Cloudflare","Gmail","域名邮箱"]}]