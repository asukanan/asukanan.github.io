[{"title":"Mac安装homebrew","url":"/2025/03/17/mac-an-zhuang-homebrew/","content":"简介如果你是一位 MacOS 用户，那么你可能听说过 Homebrew 。Homebrew 是 MacOS 下的包管理工具，类似 apt 、yum 。如果一款软件支持了 Homebrew 安装渠道，那么我们就可以通过 Homebrew 一键安装，省时省力省心。\n使用脚本安装\n官方提供安装脚本，可以直接使用：\n/bin/bash -c &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)&quot;\n\n如果是大陆网络环境安装缓慢，可以尝试切换中科大镜像源：\n/bin/bash -c &quot;$(curl -fsSL https://gitee.com/ineo6/homebrew-install/raw/master/install.sh)&quot;\n\n手动安装不喜欢用脚本的也可以手动安装：\n\n创建安装目录\n\nsudo mkdir -p /opt/homebrew\n\n\n修改所有者，所属组\n\nsudo chown -R $(whoami) /opt/homebrew\n\n\n安装 homebrew\n\ncurl -L https://github.com/Homebrew/brew/tarball/master | tar xz --strip 1 -C /opt/homebrew\n\n\n修改所有者，所属组\n\nsudo chown -R $(whoami) /opt/homebrew\n\n\n修改环境变量\n\necho &#x27;path=(&#x27;/opt/homebrew/bin&#x27; $path) &amp;&amp; export PATH&#x27; &gt;&gt; ~/.zshrc\n\n\n刷新环境变量\n\nsource ~/.zshrc\n\n\n测试是否安装成功\n\nbrew -v","categories":["工具"],"tags":["Mac","Homebrew"]},{"title":"Mac搭建Hexo博客","url":"/2025/07/28/mac-da-jian-hexo-bo-ke/","content":"前言最近开始捣鼓 Hexo，一个轻量的静态博客框架，主要是想找个地方安静地记录点东西，也顺便体验下 Hexo + Git 的完整部署流程。虽然官方文档写得已经够详细了，但在 Mac 上操作的过程中还是踩了不少小坑，于是就决定把整个过程整理记录下来，也方便自己回顾。\n准备工作安装 HomebrewHomebrew 是 macOS 下最常用的包管理工具，后续需要用它来安装依赖。使用以下命令进行安装：\n/bin/bash -c &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)&quot;\n\n安装完成后可以运行 brew -v 检查是否安装成功。\n安装 Git 和 Node.jsGit 是 Hexo 项目版本控制的基础，而 Hexo 则基于 Node.js 运行。macOS 自带 Git，如果你希望使用最新版本，也可以通过 Homebrew 升级。确认 Git 安装：\ngit --version\n\n然后安装 Node.js（包含 npm）：\nbrew install node\n\n安装 Hexo 并初始化项目使用 npm 全局安装 Hexo CLI 工具：\nnpm install -g hexo-cli\n\n安装完成后，在你希望存放博客的路径下初始化项目：\nhexo init blogcd blognpm install\n\n这里的 blog 是你博客项目的文件夹名，可以根据喜好替换。\n⚠️注意：以下所有的hexo命令都需要在blog路径下执行，即确保先执行cd blog。\n初始化后可以生成和本地预览博客：\nhexo generate 或 hexo g   # 生成静态文件hexo server 或 hexo s     # 启动本地服务器\n\n然后访问浏览器中的 http://localhost:4000 即可看到博客初始页面。\n部署到 GitHub PagesHexo 默认使用 public 文件夹存放生成的静态资源，我们只需要把它部署到 GitHub 即可上线。\n配置 GitHub SSH 密钥如果你还未在本机配置过 SSH，可以按以下步骤进行：\nssh-keygen -t ed25519 -C &quot;your_email@example.com&quot;\n\n一路回车后，复制生成的公钥内容：\npbcopy &lt; ~/.ssh/id_ed25519.pub\n\n然后前往 GitHub 个人设置中添加 SSH key。\n设置 Git 账号git config --global user.name &quot;YourName&quot;git config --global user.email &quot;your_email@example.com&quot;\n\n安装部署插件Hexo 需要用到一个插件将博客内容部署到 GitHub：\nnpm install hexo-deployer-git --save\n\n创建 GitHub 仓库并启用 Pages\n登录 GitHub，点击右上角“+” → “New repository”；\n仓库名称建议为：yourusername.github.io（将 yourusername 替换为你的 GitHub 用户名）；\n选择 public 类型，点击创建；\n创建成功后进入仓库页面，点击“Settings” → 左侧“Pages”；\n在“Source”处选择 Deploy from a branch；\n选择 main 分支，文件夹选择 / (root)，点击保存；\n页面会自动生成一个访问链接，等待几分钟后就能访问。\n\n配置 Hexo 部署信息修改blog目录下 _config.yml 配置文件，添加以下部署信息：\ndeploy:  type: git  repo: git@github.com:你的用户名/你的仓库名.git  branch: main\n\n确保你的仓库已经创建完成且为 public，然后执行：\nhexo cleanhexo ghexo d\n\n第一次部署可能会提示是否接受 SSH 密钥认证，输入 yes 即可。\n自定义域名配置（可选）如果你有自己的域名，可以将博客部署在个性化的地址。\n\n在博客目录中创建一个 CNAME 文件：\n\necho &quot;yourdomain.com&quot; &gt; blog/source/CNAME\n\n\n在你的域名服务商（如 Cloudflare、阿里云等）中添加一条 CNAME 记录，指向 GitHub Pages：\n\nyourusername.github.io\n\n⚠️ 注意：如果你使用 Cloudflare，添加 CNAME 记录时请关闭“小云朵”图标（即不要开启代理），否则可能导致 GitHub Pages 无法正确解析。\n\n登录 GitHub，进入你的博客仓库页面，点击“Settings” → 左侧“Pages”；\n\n在“Custom domain”栏中填写你的域名 yourdomain.com 并点击“Save”；\n\n勾选 Enforce HTTPS，等待 DNS 解析完成后访问你的自定义域名即可生效。\n\n同时确保 _config.yml 中的 url 字段也已更新为你的域名：\n\n\nurl: https://yourdomain.com\n\n这样每次部署时，Hexo 会自动将 CNAME 文件同步至 public 文件夹，实现自定义域名访问。\n常用命令整理\nhexo clean：清理缓存文件（如生成失败时可用）\nhexo generate 或 hexo g：生成静态资源\nhexo server 或 hexo s：本地预览网站\nhexo deploy 或 hexo d：部署博客到远端\n\n后记整个过程看似步骤繁多，实际上操作几次就熟悉了。如果你也在寻找一个简洁、可控的写作平台，不妨试试 Hexo。接下来可以根据自己的喜好更换主题、美化样式，慢慢打造属于自己的博客空间。\n","categories":["工具"],"tags":["Mac","Hexo","Github"]},{"title":"使用 Cloudflare 和 Gmail 搭建自定义域名邮箱","url":"/2025/08/03/shi-yong-cloudflare-he-gmail-da-jian-zi-ding-yi-yu-ming-you-xiang/","content":"很多人看到别人使用 admin@domain.com、contact@domain.com 作为邮箱，感觉很专业。其实你也可以免费拥有自己的自定义域名邮箱，比如 mail@example.com，并使用 Gmail 或 Spark 收发邮件。\n本教程将手把手教你使用 Cloudflare + Gmail 搭建一个完全免费的自定义邮箱系统，支持：\n\n📥 邮件接收（通过 Cloudflare 自动转发到 Gmail）\n📤 邮件发送（通过 Gmail SMTP 或 Spark 客户端）\n🧊 支持 Catch-all（接收所有 @example.com 邮件）\n\n\n各种域名邮箱方案对比\n\n\n服务\n收费\n配置难度\n收件方式\n发件方式\n推荐指数\n\n\n\nCloudflare + Gmail\n免费\n🌟 非常简单\nCloudflare 转发\nGmail SMTP\n⭐⭐⭐⭐⭐\n\n\nYandex Mail\n免费（限制多）\n中等\n自带\n自带 SMTP\n⭐⭐\n\n\nMailgun\n免费额度有限\n较复杂\n不支持直接收件\n提供 SMTP\n⭐⭐\n\n\nZoho Mail\n有免费方案\n中等\n自带 Webmail 收件\n自带 SMTP\n⭐⭐⭐\n\n\n\n✅ Cloudflare 是目前对个人用户最友好的免费方案，操作少，界面全中文，维护简单。\n\n\n使用 Cloudflare 接收邮件第一步：开启 Cloudflare 邮件路由功能\n登录 Cloudflare 控制台\n进入你已经接入的域名（如 example.com）\n点击左侧导航栏的「电子邮件」\n点击「开始使用」\n填写：\n自定义地址：填写你要创建的邮箱名，例如 mail\n目标地址：填写你 Gmail 的地址，例如 yourname@gmail.com\n\n\n点击添加，Cloudflare 会自动创建以下 DNS 记录：\nMX 记录：启用邮件接收\nTXT 记录：验证域名归属\n\n\n等待几分钟，Cloudflare 会显示状态为 ✅「已启用」\n\n\n第二步（可选）：启用 Catch-all 邮箱如果你想接收所有发往 @example.com 的邮件（例如 abc@example.com、test@example.com），可以启用 Catch-all 功能：\n\n在邮件路由页面下方，找到「Catch-all 地址」\n勾选启用\n设置默认转发地址为你的 Gmail 地址\n\n\n⚠️ 建议先验证单个邮箱可用后再开启 Catch-all，避免接收到大量垃圾邮件。\n\n\n获取 Gmail 的应用专用密码（用于 SMTP）为了安全，Google 不允许用主密码登录第三方 SMTP 服务，必须使用专用密码。\n获取流程如下：\n打开你的 Google 账户安全设置页面：👉 https://myaccount.google.com/security\n\n在「登录 Google」区域，启用两步验证\n\n如果已启用，点击「两步验证」进入设置页面\n\n\n在「两步验证」页面，找到「应用专用密码」一项\n\n点击进入，自定义应用名称，如“域名邮箱”\n\n点击「生成」，你会获得一组 16 位的专用密码\n\n只显示一次，记得立即复制保存\n\n\n\n\n在 Gmail 中发送自定义邮箱邮件我们需要在 Gmail 中设置发件人地址为 mail@example.com，并使用刚才生成的专用密码登录 SMTP。\n添加发件邮箱步骤：\n打开 Gmail → 设置 →「查看所有设置」\n\n切换到「账户和导入」标签页\n\n找到「发送邮件时的名称」 → 点击「添加其他电子邮件地址」\n\n填写：\n\n名称：随意\n\n邮箱地址：mail@example.com\n\n\n\n点击「下一步」，进入 SMTP 设置\n\n\n\nSMTP 信息填写如下：\n\n\n项目\n内容\n\n\n\nSMTP 服务器\nsmtp.gmail.com\n\n\n端口\n587\n\n\n用户名\n你的 Gmail 地址\n\n\n密码\n你刚刚生成的应用专用密码\n\n\n\n完成后 Gmail 会发送一封验证邮件到 mail@example.com（即转发到你 Gmail）\n打开收件箱，点击验证链接，即可完成发件设置\n\n\n使用域名邮箱Gmail：验证成功后，使用Gmail发送邮件时，就可以选择发件人了，不多赘述。\n在 Spark 中接收邮件Spark 是一款优秀的支持多平台的邮件客户端，因为邮件已经被 Cloudflare 转发到 Gmail，无需额外设置，只需在 Spark 添加你的 Gmail 即可。\n设置 Spark 发件别名为 mail@example.com\nSpark → 设置 → 邮箱账号 → Gmail 账户 → 替身邮箱\n添加替身邮箱：\n姓名：随意\n邮箱地址：mail@example.com\n可选：将mail@example.com设置为默认邮址\n\n\n\n之后你就可以在 Spark 中以 mail@example.com 的身份发送邮件了 \n\n测试步骤\n给 mail@example.com 发送一封邮件→ 查看是否能正常转发到你的 Gmail\n\n在 Gmail 或 Spark 中选择发件人为 mail@example.com 发送邮件→ 查看收件人是否能看到你自定义的发件邮箱\n\n\n\n总结通过 Cloudflare 与 Gmail 的组合，你可以免费拥有一个完整的域名邮箱方案：\n\n✅ 接收邮件：Cloudflare 转发至 Gmail\n✅ 发送邮件：通过 Gmail 或 Spark 使用 SMTP 发信\n✅ 免费、安全、无需第三方邮箱服务\n✅ 支持 Catch-all，多邮箱同时管理\n\n这是一种非常适合个人博客、自建站、开发者项目的域名邮箱搭建方式！\n","categories":["杂谈"],"tags":["Cloudflare","Gmail","域名邮箱"]},{"title":"snell简单搭建","url":"/2025/04/24/snell-jian-dan-da-jian/","content":"前言Snell 是 Surge 官方推出的一款轻量级代理服务器，基于自定义协议，专为搭配 Surge 使用设计，支持 TCP、UDP 以及 TLS 加密传输。\n本文简要介绍如何在 Linux 系统上安装和配置 Snell，实现本地代理转发。操作步骤简洁明了，适合快速部署。\n安装 Snell\n下载并解压服务端 ,以 Snell v5.0.0 Linux amd64 版本为例：\nwget -O snell-server.zip https://dl.nssurge.com/snell/snell-server-v5.0.0-linux-amd64.zip      &amp;&amp; unzip snell-server.zip -d /usr/local/bin      &amp;&amp; rm snell-server.zip\n\n添加执行权限：\nchmod +x /usr/local/bin/snell-server\n\n\n创建配置文件：\n\n首先新建配置目录：\nsudo mkdir /etc/snell\n\n使用向导生成配置文件（推荐）：\nsudo snell-server --wizard -c /etc/snell/snell-server.conf\n\n或者手动创建：\nsudo vim /etc/snell/snell-server.conf\n\n内容示例：\n[snell-server]listen = 0.0.0.0:portpsk = pskipv6 = false\n\n提示：你可以使用以下命令生成随机 PSK：\nopenssl rand -base64 32\n\n\n\n创建独立用户运行 Snell\n建议为 Snell 创建一个低权限系统用户以提高安全性：\n\nsudo useradd --system --no-create-home --shell /usr/sbin/nologin snell\n\n\n确保执行文件和配置文件拥有正确权限：\n\nsudo chown -R snell:snell /usr/local/bin/snell-serversudo chown -R snell:snell /etc/snell\n\n配置 systemd 服务为了便于管理 Snell 服务，建议配置 systemd 单元：\nsudo vim /etc/systemd/system/snell.service\n\n添加以下内容：\n[Unit]Description=Snell Proxy ServiceAfter=network.target[Service]ExecStart=/usr/local/bin/snell-server -c /etc/snell/snell-server.confUser=snellRestart=on-failure[Install]WantedBy=multi-user.target\n\n保存后执行以下命令启动并设置开机启动：\nsudo systemctl daemon-reloadsudo systemctl enable --now snell\n\n查看服务状态：\nsudo systemctl status snell\n\n开放防火墙端口根据配置中监听的端口号，在防火墙中放行：\nsudo ufw allow 端口号\n\n\n更新 Snell更新 Snell 的方式与首次安装类似，只需下载新版覆盖旧文件即可，注意替换下载链接：\nsudo systemctl stop snellwget -O snell-server.zip https://dl.nssurge.com/snell/snell-server-v5.0.0-linux-amd64.zip \\  &amp;&amp; unzip -o snell-server.zip -d /usr/local/bin \\  &amp;&amp; rm snell-server.zipchmod +x /usr/local/bin/snell-serversudo systemctl start snell\n\n你也可以查看官方发布页确认是否有新版本。\n结语Snell 是一个部署快速、配置灵活的代理服务器，适合个人或小规模私用代理部署。搭配 Surge 使用可实现高速稳定的连接体验。\n","categories":["工具"],"tags":["Surge","Linux","snell"]},{"title":"yt-dlp简单配置","url":"/2025/05/05/yt-dlp-jian-dan-pei-zhi/","content":"简介\nyt-dlp 是一个很强大的 YouTube 和各类视频平台下载器，相比 youtube-dl 更新得更快、功能更多。\n\n安装\n安装没什么好说的，详见官方指引，建议配合 FFmpeg、 aria2 使用。\n\n配置\n分享一个简单的配置，根据实际需要自行调整\n\n# 保存目录和文件名--paths $HOME/Downloads-o &quot;%(upload_date)s-%(uploader)s-%(title)s.%(ext)s&quot;# 选择最佳画质视频+音频，并合并成 mp4-f bestvideo+bestaudio/best--merge-output-format mp4# 使用 aria2c 加速下载--external-downloader aria2c--external-downloader-args &quot;-c -x16 -s16 -k1M&quot;# 遇到已有文件时跳过--no-overwrites--no-part--no-continue# 下载失败时自动重试--retries 5--fragment-retries 5--abort-on-unavailable-fragment--ignore-errors# 其他（可选，增强体验）#&gt; 显示进度条--progress#&gt; 不修改文件的修改时间--no-mtime#&gt; 下载后把标题、作者等写入mp4文件元数据--embed-metadata#&gt; 如果有封面图，则嵌入视频--embed-thumbnail#&gt; 自动写入常见的元信息标签--add-metadata#&gt; 反机器人机制--extractor-args &quot;generic:impersonate&quot;\n","categories":["工具"],"tags":["yt-dlp","视频"]}]