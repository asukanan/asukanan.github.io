<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Mac搭建Hexo博客</title>
    <link href="/2025/07/28/mac-da-jian-hexo-bo-ke/"/>
    <url>/2025/07/28/mac-da-jian-hexo-bo-ke/</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>最近开始捣鼓 <a href="https://hexo.io/zh-cn/">Hexo</a>，一个轻量的静态博客框架，主要是想找个地方安静地记录点东西，也顺便体验下 Hexo + Git 的完整部署流程。虽然官方文档写得已经够详细了，但在 Mac 上操作的过程中还是踩了不少小坑，于是就决定把整个过程整理记录下来，也方便自己回顾。</p><h1 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h1><h2 id="安装-Homebrew"><a href="#安装-Homebrew" class="headerlink" title="安装 Homebrew"></a>安装 Homebrew</h2><p><a href="https://brew.sh/">Homebrew</a> 是 macOS 下最常用的包管理工具，后续需要用它来安装依赖。使用以下命令进行安装：</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">/bin/bash <span class="token parameter variable">-c</span> <span class="token string">"<span class="token variable"><span class="token variable">$(</span><span class="token function">curl</span> <span class="token parameter variable">-fsSL</span> https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh<span class="token variable">)</span></span>"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>安装完成后可以运行 <code>brew -v</code> 检查是否安装成功。</p><h2 id="安装-Git-和-Node-js"><a href="#安装-Git-和-Node-js" class="headerlink" title="安装 Git 和 Node.js"></a>安装 Git 和 Node.js</h2><p>Git 是 Hexo 项目版本控制的基础，而 Hexo 则基于 Node.js 运行。macOS 自带 Git，如果你希望使用最新版本，也可以通过 Homebrew 升级。确认 Git 安装：</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> <span class="token parameter variable">--version</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>然后安装 Node.js（包含 npm）：</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">brew <span class="token function">install</span> <span class="token function">node</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><h1 id="安装-Hexo-并初始化项目"><a href="#安装-Hexo-并初始化项目" class="headerlink" title="安装 Hexo 并初始化项目"></a>安装 Hexo 并初始化项目</h1><p>使用 npm 全局安装 Hexo CLI 工具：</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> <span class="token parameter variable">-g</span> hexo-cli<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>安装完成后，在你希望存放博客的路径下初始化项目：</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo init blog<span class="token builtin class-name">cd</span> blog<span class="token function">npm</span> <span class="token function">install</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div></figure><p>这里的 <code>blog</code> 是你博客项目的文件夹名，可以根据喜好替换。</p><p>⚠️<strong>注意：以下所有的hexo命令都需要在<code>blog</code>路径下执行，即确保先执行<code>cd blog</code>。</strong></p><p>初始化后可以生成和本地预览博客：</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo generate 或 hexo g   <span class="token comment"># 生成静态文件</span>hexo server 或 hexo s     <span class="token comment"># 启动本地服务器</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div></figure><p>然后访问浏览器中的 <a href="http://localhost:4000/">http://localhost:4000</a> 即可看到博客初始页面。</p><h1 id="部署到-GitHub-Pages"><a href="#部署到-GitHub-Pages" class="headerlink" title="部署到 GitHub Pages"></a>部署到 GitHub Pages</h1><p>Hexo 默认使用 <code>public</code> 文件夹存放生成的静态资源，我们只需要把它部署到 GitHub 即可上线。</p><h2 id="配置-GitHub-SSH-密钥"><a href="#配置-GitHub-SSH-密钥" class="headerlink" title="配置 GitHub SSH 密钥"></a>配置 GitHub SSH 密钥</h2><p>如果你还未在本机配置过 SSH，可以按以下步骤进行：</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">ssh-keygen <span class="token parameter variable">-t</span> ed25519 <span class="token parameter variable">-C</span> <span class="token string">"your_email@example.com"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>一路回车后，复制生成的公钥内容：</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">pbcopy <span class="token operator">&lt;</span> ~/.ssh/id_ed25519.pub<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>然后前往 GitHub 个人设置中添加 SSH key。</p><h2 id="设置-Git-账号"><a href="#设置-Git-账号" class="headerlink" title="设置 Git 账号"></a>设置 Git 账号</h2><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> config <span class="token parameter variable">--global</span> user.name <span class="token string">"YourName"</span><span class="token function">git</span> config <span class="token parameter variable">--global</span> user.email <span class="token string">"your_email@example.com"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div></figure><h2 id="安装部署插件"><a href="#安装部署插件" class="headerlink" title="安装部署插件"></a>安装部署插件</h2><p>Hexo 需要用到一个插件将博客内容部署到 GitHub：</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-deployer-git <span class="token parameter variable">--save</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><h2 id="创建-GitHub-仓库并启用-Pages"><a href="#创建-GitHub-仓库并启用-Pages" class="headerlink" title="创建 GitHub 仓库并启用 Pages"></a>创建 GitHub 仓库并启用 Pages</h2><ol><li>登录 GitHub，点击右上角“+” → “New repository”；</li><li>仓库名称建议为：<code>yourusername.github.io</code>（将 <code>yourusername</code> 替换为你的 GitHub 用户名）；</li><li>选择 public 类型，点击创建；</li><li>创建成功后进入仓库页面，点击“Settings” → 左侧“Pages”；</li><li>在“Source”处选择 <code>Deploy from a branch</code>；</li><li>选择 <code>main</code> 分支，文件夹选择 <code>/ (root)</code>，点击保存；</li><li>页面会自动生成一个访问链接，等待几分钟后就能访问。</li></ol><h2 id="配置-Hexo-部署信息"><a href="#配置-Hexo-部署信息" class="headerlink" title="配置 Hexo 部署信息"></a>配置 Hexo 部署信息</h2><p>修改<code>blog</code>目录下 <code>_config.yml</code> 配置文件，添加以下部署信息：</p><figure><div class="code-wrapper"><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">deploy</span><span class="token punctuation">:</span>  <span class="token key atrule">type</span><span class="token punctuation">:</span> git  <span class="token key atrule">repo</span><span class="token punctuation">:</span> git@github.com<span class="token punctuation">:</span>你的用户名/你的仓库名.git  <span class="token key atrule">branch</span><span class="token punctuation">:</span> main<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>确保你的仓库已经创建完成且为 public，然后执行：</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo cleanhexo ghexo d<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div></figure><p>第一次部署可能会提示是否接受 SSH 密钥认证，输入 yes 即可。</p><h1 id="自定义域名配置（可选）"><a href="#自定义域名配置（可选）" class="headerlink" title="自定义域名配置（可选）"></a>自定义域名配置（可选）</h1><p>如果你有自己的域名，可以将博客部署在个性化的地址。</p><ol><li>在博客目录中创建一个 <code>CNAME</code> 文件：</li></ol><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">echo</span> <span class="token string">"yourdomain.com"</span> <span class="token operator">></span> blog/source/CNAME<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><ol start="2"><li>在你的域名服务商（如 Cloudflare、阿里云等）中添加一条 CNAME 记录，指向 GitHub Pages：</li></ol><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">yourusername.github.io<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>⚠️ <strong>注意：如果你使用 Cloudflare，添加 CNAME 记录时请关闭“小云朵”图标（即不要开启代理），否则可能导致 GitHub Pages 无法正确解析。</strong></p><ol start="3"><li><p>登录 GitHub，进入你的博客仓库页面，点击“Settings” → 左侧“Pages”；</p></li><li><p>在“Custom domain”栏中填写你的域名 <code>yourdomain.com</code> 并点击“Save”；</p></li><li><p>勾选 <code>Enforce HTTPS</code>，等待 DNS 解析完成后访问你的自定义域名即可生效。</p></li><li><p>同时确保 <code>_config.yml</code> 中的 <code>url</code> 字段也已更新为你的域名：</p></li></ol><figure><div class="code-wrapper"><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">url</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//yourdomain.com<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>这样每次部署时，Hexo 会自动将 CNAME 文件同步至 <code>public</code> 文件夹，实现自定义域名访问。</p><h1 id="常用命令整理"><a href="#常用命令整理" class="headerlink" title="常用命令整理"></a>常用命令整理</h1><ul><li><code>hexo clean</code>：清理缓存文件（如生成失败时可用）</li><li><code>hexo generate</code> 或 <code>hexo g</code>：生成静态资源</li><li><code>hexo server</code> 或 <code>hexo s</code>：本地预览网站</li><li><code>hexo deploy</code> 或 <code>hexo d</code>：部署博客到远端</li></ul><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>整个过程看似步骤繁多，实际上操作几次就熟悉了。如果你也在寻找一个简洁、可控的写作平台，不妨试试 Hexo。接下来可以根据自己的喜好更换主题、美化样式，慢慢打造属于自己的博客空间。</p>]]></content>
    
    
    <categories>
      
      <category>Mac</category>
      
    </categories>
    
    
    <tags>
      
      <tag>hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>yt-dlp简单配置</title>
    <link href="/2025/05/05/yt-dlp-jian-dan-pei-zhi/"/>
    <url>/2025/05/05/yt-dlp-jian-dan-pei-zhi/</url>
    
    <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><ul><li>yt-dlp 是一个很强大的 YouTube 和各类视频平台下载器，相比 youtube-dl 更新得更快、功能更多。</li></ul><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><ul><li>安装没什么好说的，详见<a href="https://github.com/yt-dlp/yt-dlp/wiki/Installation">官方指引</a>，建议配合 <a href="https://ffmpeg.org/">FFmpeg</a>、 <a href="https://aria2.github.io/">aria2</a> 使用。</li></ul><h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h1><ul><li>分享一个简单的配置，根据实际需要自行调整</li></ul><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none"># 保存目录和文件名--paths $HOME&#x2F;Downloads-o &quot;%(upload_date)s-%(uploader)s-%(title)s.%(ext)s&quot;# 选择最佳画质视频+音频，并合并成 mp4-f bestvideo+bestaudio&#x2F;best--merge-output-format mp4# 使用 aria2c 加速下载--external-downloader aria2c--external-downloader-args &quot;-c -x16 -s16 -k1M&quot;# 遇到已有文件时跳过--no-overwrites--no-part--no-continue# 下载失败时自动重试--retries 5--fragment-retries 5--abort-on-unavailable-fragment--ignore-errors# 其他（可选，增强体验）#&gt; 显示进度条--progress#&gt; 不修改文件的修改时间--no-mtime#&gt; 下载后把标题、作者等写入mp4文件元数据--embed-metadata#&gt; 如果有封面图，则嵌入视频--embed-thumbnail#&gt; 自动写入常见的元信息标签--add-metadata#&gt; 反机器人机制--extractor-args &quot;generic:impersonate&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure>]]></content>
    
    
    <categories>
      
      <category>Tools</category>
      
    </categories>
    
    
    <tags>
      
      <tag>yt-dlp</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>snell简单搭建</title>
    <link href="/2025/04/24/snell-jian-dan-da-jian/"/>
    <url>/2025/04/24/snell-jian-dan-da-jian/</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p><a href="https://kb.nssurge.com/surge-knowledge-base/zh/release-notes/snell">Snell</a> 是 Surge 官方推出的一款轻量级代理服务器，基于自定义协议，专为搭配 Surge 使用设计，支持 TCP、UDP 以及 TLS 加密传输。</p><p>本文简要介绍如何在 Linux 系统上安装和配置 Snell，实现本地代理转发。操作步骤简洁明了，适合快速部署。</p><h1 id="安装-Snell"><a href="#安装-Snell" class="headerlink" title="安装 Snell"></a>安装 Snell</h1><ol><li><p>下载并解压服务端 ,以 Snell v5.0.0 Linux amd64 版本为例：</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">wget</span> <span class="token parameter variable">-O</span> snell-server.zip https://dl.nssurge.com/snell/snell-server-v5.0.0-linux-amd64.zip      <span class="token operator">&amp;&amp;</span> <span class="token function">unzip</span> snell-server.zip <span class="token parameter variable">-d</span> /usr/local/bin      <span class="token operator">&amp;&amp;</span> <span class="token function">rm</span> snell-server.zip<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>添加执行权限：</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">chmod</span> +x /usr/local/bin/snell-server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure></li><li><p>创建配置文件：</p><ul><li><p>首先新建配置目录：</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">mkdir</span> /etc/snell<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure></li><li><p>使用向导生成配置文件（推荐）：</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> snell-server <span class="token parameter variable">--wizard</span> <span class="token parameter variable">-c</span> /etc/snell/snell-server.conf<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure></li><li><p>或者手动创建：</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">vim</span> /etc/snell/snell-server.conf<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>内容示例：</p><figure><div class="code-wrapper"><pre class="line-numbers language-ini" data-language="ini"><code class="language-ini"><span class="token section"><span class="token punctuation">[</span><span class="token section-name selector">snell-server</span><span class="token punctuation">]</span></span><span class="token key attr-name">listen</span> <span class="token punctuation">=</span> <span class="token value attr-value">0.0.0.0:port</span><span class="token key attr-name">psk</span> <span class="token punctuation">=</span> <span class="token value attr-value">psk</span><span class="token key attr-name">ipv6</span> <span class="token punctuation">=</span> <span class="token value attr-value">false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>提示：你可以使用以下命令生成随机 PSK：</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">openssl rand <span class="token parameter variable">-base64</span> <span class="token number">32</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure></li></ul></li></ol><h1 id="创建独立用户运行-Snell"><a href="#创建独立用户运行-Snell" class="headerlink" title="创建独立用户运行 Snell"></a>创建独立用户运行 Snell</h1><ol><li>建议为 Snell 创建一个低权限系统用户以提高安全性：</li></ol><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">useradd</span> <span class="token parameter variable">--system</span> --no-create-home <span class="token parameter variable">--shell</span> /usr/sbin/nologin snell<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><ol start="2"><li>确保执行文件和配置文件拥有正确权限：</li></ol><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">chown</span> <span class="token parameter variable">-R</span> snell:snell /usr/local/bin/snell-server<span class="token function">sudo</span> <span class="token function">chown</span> <span class="token parameter variable">-R</span> snell:snell /etc/snell<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div></figure><h1 id="配置-systemd-服务"><a href="#配置-systemd-服务" class="headerlink" title="配置 systemd 服务"></a>配置 systemd 服务</h1><p>为了便于管理 Snell 服务，建议配置 systemd 单元：</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">vim</span> /etc/systemd/system/snell.service<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>添加以下内容：</p><figure><div class="code-wrapper"><pre class="line-numbers language-ini" data-language="ini"><code class="language-ini"><span class="token section"><span class="token punctuation">[</span><span class="token section-name selector">Unit</span><span class="token punctuation">]</span></span><span class="token key attr-name">Description</span><span class="token punctuation">=</span><span class="token value attr-value">Snell Proxy Service</span><span class="token key attr-name">After</span><span class="token punctuation">=</span><span class="token value attr-value">network.target</span><span class="token section"><span class="token punctuation">[</span><span class="token section-name selector">Service</span><span class="token punctuation">]</span></span><span class="token key attr-name">ExecStart</span><span class="token punctuation">=</span><span class="token value attr-value">/usr/local/bin/snell-server -c /etc/snell/snell-server.conf</span><span class="token key attr-name">User</span><span class="token punctuation">=</span><span class="token value attr-value">snell</span><span class="token key attr-name">Restart</span><span class="token punctuation">=</span><span class="token value attr-value">on-failure</span><span class="token section"><span class="token punctuation">[</span><span class="token section-name selector">Install</span><span class="token punctuation">]</span></span><span class="token key attr-name">WantedBy</span><span class="token punctuation">=</span><span class="token value attr-value">multi-user.target</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>保存后执行以下命令启动并设置开机启动：</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> systemctl daemon-reload<span class="token function">sudo</span> systemctl <span class="token builtin class-name">enable</span> <span class="token parameter variable">--now</span> snell<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div></figure><p>查看服务状态：</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> systemctl status snell<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><h1 id="开放防火墙端口"><a href="#开放防火墙端口" class="headerlink" title="开放防火墙端口"></a>开放防火墙端口</h1><p>根据配置中监听的端口号，在防火墙中放行：</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> ufw allow 端口号<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><h1 id="更新-Snell"><a href="#更新-Snell" class="headerlink" title="更新 Snell"></a>更新 Snell</h1><p>更新 Snell 的方式与首次安装类似，只需下载新版覆盖旧文件即可，注意替换下载链接：</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> systemctl stop snell<span class="token function">wget</span> <span class="token parameter variable">-O</span> snell-server.zip https://dl.nssurge.com/snell/snell-server-v5.0.0-linux-amd64.zip <span class="token punctuation">\</span>  <span class="token operator">&amp;&amp;</span> <span class="token function">unzip</span> <span class="token parameter variable">-o</span> snell-server.zip <span class="token parameter variable">-d</span> /usr/local/bin <span class="token punctuation">\</span>  <span class="token operator">&amp;&amp;</span> <span class="token function">rm</span> snell-server.zip<span class="token function">chmod</span> +x /usr/local/bin/snell-server<span class="token function">sudo</span> systemctl start snell<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>你也可以查看<a href="https://kb.nssurge.com/surge-knowledge-base/zh/release-notes/snell">官方</a>发布页确认是否有新版本。</p><h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><p>Snell 是一个部署快速、配置灵活的代理服务器，适合个人或小规模私用代理部署。搭配 Surge 使用可实现高速稳定的连接体验。</p>]]></content>
    
    
    <categories>
      
      <category>Surge</category>
      
    </categories>
    
    
    <tags>
      
      <tag>snell</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Mac安装homebrew</title>
    <link href="/2025/03/17/mac-an-zhuang-homebrew/"/>
    <url>/2025/03/17/mac-an-zhuang-homebrew/</url>
    
    <content type="html"><![CDATA[<h1 id="创建安装目录"><a href="#创建安装目录" class="headerlink" title="创建安装目录"></a>创建安装目录</h1><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">sudo mkdir -p &#x2F;opt&#x2F;homebrew<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><h1 id="修改所有者，所属组"><a href="#修改所有者，所属组" class="headerlink" title="修改所有者，所属组"></a>修改所有者，所属组</h1><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">sudo chown -R $(whoami) &#x2F;opt&#x2F;homebrew<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><h1 id="安装-homebrew"><a href="#安装-homebrew" class="headerlink" title="安装 homebrew"></a>安装 homebrew</h1><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">curl -L https:&#x2F;&#x2F;github.com&#x2F;Homebrew&#x2F;brew&#x2F;tarball&#x2F;master | tar xz --strip 1 -C &#x2F;opt&#x2F;homebrew<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><h1 id="修改所有者，所属组-1"><a href="#修改所有者，所属组-1" class="headerlink" title="修改所有者，所属组"></a>修改所有者，所属组</h1><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">sudo chown -R $(whoami) &#x2F;opt&#x2F;homebrew<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><h1 id="修改环境变量"><a href="#修改环境变量" class="headerlink" title="修改环境变量"></a>修改环境变量</h1><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">echo &#39;path&#x3D;(&#39;&#x2F;opt&#x2F;homebrew&#x2F;bin&#39; $path) &amp;&amp; export PATH&#39; &gt;&gt; ~&#x2F;.zshrc<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><h1 id="刷新环境变量"><a href="#刷新环境变量" class="headerlink" title="刷新环境变量"></a>刷新环境变量</h1><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">source ~&#x2F;.zshrc<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><h1 id="测试是否安装成功"><a href="#测试是否安装成功" class="headerlink" title="测试是否安装成功"></a>测试是否安装成功</h1><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">brew<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure>]]></content>
    
    
    <categories>
      
      <category>Mac</category>
      
    </categories>
    
    
    <tags>
      
      <tag>homebrew</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
